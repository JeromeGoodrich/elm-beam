'elm_lang@core@Main@+'/2 = fun (_x, _y) ->
	_x
'elm_lang@core@Main@f'/1 = fun (_count) ->
	letrec 'traverse'/1 =
		fun (_count) ->
			case _count of
				<{'Zero'}> when 'true' ->
					0
				<{'OneAnd', _more}> when 'true' ->
					let <_1> =
						call 'Runtime':'apply' (_traverse, _more)
					in
						apply 'elm_lang@core@Main@+'/2 (1, _1)
			end
	in
		call 'Runtime':'apply' (_traverse, _count)
'elm_lang@core@Main@OneAnd'/1 = fun (_v1) ->
	{'OneAnd', _v1}
'elm_lang@core@Main@Zero'/0 = fun () ->
	{'Zero'}
